{"version":3,"sources":["images/justin-and-dragons-logo.png","images/sprites/Hada.png","components/Party/Party.js","components/Timeline/Timeline.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Party","activeMembers","leaveParty","member","classList","remove","setTimeout","style","display","joinParty","add","updateActiveMembers","members","availableElements","document","getElementById","childNodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","value","indexOf","id","_this","err","return","createParty","partyElements","i","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","partyMembers","push","react_default","a","createElement","key","src","hada","alt","className","this","Component","Timeline","createTimeline","events","timelineData","event","date","getEvent","App","timelineEvents","lastScrollX","ticking","currentBackground","handleScroll","window","scrollX","requestAnimationFrame","checkIfActive","scrollStop","callback","isScrolling","addEventListener","clearTimeout","getTimelineEvents","getElementsByClassName","eventPosition","getBoundingClientRect","left","currentEvent","refs","timeline","party","currentEventIndex","location","setBackground","innerHTML","concat","description","index","console","log","parallaxContainer","nextItem","scrollToEvent","previousItem","scrollTo","offsetLeft","behavior","timelineWidth","clientWidth","parallaxLayers","width","removeEventListener","logo","onClick","src_components_Timeline_Timeline","ref","components_Party_Party","Boolean","hostname","match","ReactDOM","render","components_App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8f931bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/justin-and-dragons-logo.c81a4c93.png\";","module.exports = __webpack_public_path__ + \"static/media/Hada.213d5654.png\";","import React, { Component } from 'react';\nimport './Party.css';\n\nimport partyMembers from './PartyMembers.json';\n// import broxigar from '../../images/sprites/Broxigar.png';\nimport hada     from '../../images/sprites/Hada.png';\n\nclass Party extends Component {\n\n  activeMembers = [];\n\n  leaveParty = (member) => {\n    member.classList.remove(\"in-party\");\n    setTimeout(() => {\n      member.style.display = \"none\";\n    }, 66);\n  }\n\n  joinParty = (member) => {\n    member.style.display = \"block\";\n    setTimeout(() => {\n      member.classList.add(\"in-party\");\n    }, 66);\n  }\n\n  updateActiveMembers = (members) => {\n    let availableElements = document.getElementById(\"partyList\").childNodes;\n\n    for(let element of availableElements){\n      if(members.indexOf(element.id) !== -1){\n        this.joinParty(element);\n      }\n      else {\n        this.leaveParty(element);\n      }\n    }\n\n    // Store a reference of active members to compare\n    // the next time this function is called\n    this.activeMembers = members;\n  }\n\n  createParty = () => {\n    let partyElements = [];\n    let i = 0;\n    for(let member of partyMembers){\n      partyElements.push(\n        <li id={member} key={i}>\n          <img src={hada} alt=\"Hada\" />\n          <p>{member}</p>\n        </li>\n      );\n      i++;\n    }\n    return partyElements;\n  }\n\n  render() {\n    return (\n      <div className=\"Party\">\n        <ul id=\"partyList\">\n          {this.createParty()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Party;\n","import React, { Component } from 'react';\nimport './Timeline.css';\nimport timelineData from './Timeline.json'\n\nclass Timeline extends Component {\n\n  createTimeline = () => {\n    let events = [];\n    let i = 0;\n    for(let event of timelineData){\n      events.push(\n        <li className=\"timelineEvent\" key={i}>\n          <p className=\"pointDate\">{event.date}</p>\n          <span className=\"point\"></span>\n        </li>\n      );\n      i++;\n    }\n    return events;\n  }\n\n  getEvent = (i) => {\n    if(timelineData[i])\n      return timelineData[i];\n    return false;\n  }\n\n  render() {\n    return (\n      <div className=\"Timeline\">\n        <ol id=\"timelineList\">\n          {this.createTimeline()}\n          <li className=\"timelineSpacer\"></li>\n          <li className=\"timelineSpacer\"></li>\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default Timeline;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport logo from '../../images/justin-and-dragons-logo.png';\n\nimport Party    from '../Party/Party';\nimport Timeline from '../Timeline/Timeline';\n\nclass App extends Component {\n\n  timelineEvents  = [];\n  lastScrollX     = 0;\n  ticking         = false;\n  activeElement;\n  currentEventIndex;\n  currentBackground = '';\n\n  handleScroll = () => {\n    this.lastScrollX = window.scrollX;\n    window.requestAnimationFrame(() => {\n      // Update timeline information\n      this.checkIfActive();\n      \n      // Toggle Walking Animation \n      document.getElementById(\"partyList\").classList.add(\"walking\");\n      this.scrollStop(() => { document.getElementById(\"partyList\").classList.remove(\"walking\") });\n    });\n  };\n\n  // Calls back once scrolling has stopped.\n  // We use this to determine when to stop the Party's walking animation\n  scrollStop = (callback) => {\n    if (!callback || typeof callback !== 'function') return;\n    var isScrolling;\n    document.getElementById('parallax').addEventListener('scroll', (event) => {\n      window.clearTimeout(isScrolling);\n      isScrolling = setTimeout(() => { callback() }, 66);\n    }, false);\n  };\n\n  getTimelineEvents = () => {\n    this.timelineEvents = document.getElementsByClassName(\"timelineEvent\");\n  }\n\n  // Check the scroll position of all timeline elements\n  // Mark element as active if it is within 500px of the edge of the screen\n  checkIfActive = () => {\n    let i = 0;\n    for (let element of this.timelineEvents){\n\n      let eventPosition = element.getBoundingClientRect().left;\n\n      if(element && eventPosition >= -250 && eventPosition <= 250){ // Max range is equal to the width of every event element\n        let currentEvent = this.refs.timeline.getEvent(i);\n        \n        // Update party\n        let partyMembers = this.refs.timeline.getEvent(i).partyMembers;\n        this.refs.party.updateActiveMembers(partyMembers);\n        \n        // Mark timeline node as active\n        element.classList.add(\"active\");\n        this.currentEventIndex = i;\n\n        // Change background, if necessary\n        if(this.currentBackground === '' || this.currentBackground !== currentEvent.location){\n          this.setBackground(currentEvent.location);\n        }\n\n        // Display event details \n        document.getElementById(\"eventDescription\").innerHTML = `\n          <p class=\"event\">${currentEvent.event}</p>\n          <p class=\"date\">${currentEvent.date}</p>\n          <p>${currentEvent.description}</p>\n        `;\n      }\n      else if(element){\n        element.classList.remove(\"active\");\n      }\n      i++;\n    }\n  }\n\n  setBackground = (index) => {\n    console.log('setting background...',index)\n\n    let parallaxContainer = document.getElementById('parallax');\n  \n    switch(index){\n      default:\n      case \"1\":\n        parallaxContainer.classList.add('forest');\n\n        parallaxContainer.classList.remove('cemetery');\n        parallaxContainer.classList.remove('dungeon');\n        parallaxContainer.classList.remove('lava');\n        break;\n      case \"2\":\n        parallaxContainer.classList.add('cemetery');\n\n        parallaxContainer.classList.remove('forest');\n        parallaxContainer.classList.remove('dungeon');\n        parallaxContainer.classList.remove('lava');\n        break;\n      case \"3\":\n        parallaxContainer.classList.add('dungeon');\n\n        parallaxContainer.classList.remove('cemetery');\n        parallaxContainer.classList.remove('forest');\n        parallaxContainer.classList.remove('lava');\n        break;\n      case \"4\":\n        parallaxContainer.classList.add('lava');\n\n        parallaxContainer.classList.remove('cemetery');\n        parallaxContainer.classList.remove('forest');\n        parallaxContainer.classList.remove('dungeon');\n        break;\n    }\n\n    this.currentBackground = index;\n  }\n\n  nextItem = () => {\n    this.scrollToEvent(this.currentEventIndex + 1);\n  }\n\n  previousItem = () => {\n    this.scrollToEvent(this.currentEventIndex - 1);\n  }\n\n  scrollToEvent = (i) => {\n    if(i >= 0 && this.timelineEvents[i]){\n      document.getElementById('parallax').scrollTo({\n        left:     this.timelineEvents[i].offsetLeft, \n        behavior: \"smooth\"\n      }); \n    }\n  }\n\n  componentDidMount() {\n    // Create scroll listener\n    document.getElementById('parallax').addEventListener('scroll', this.handleScroll);\n\n    // This line prevents the characters from walking indefinitely on page refresh\n    setTimeout(() => { document.getElementById(\"partyList\").classList.remove(\"walking\") }, 0);\n\n    // Retrieve the list of timeline events, then check which one is active\n    this.getTimelineEvents();\n    this.checkIfActive();\n\n    // Set parallax background to width of the timeline\n    let timelineWidth  = document.getElementById('timelineList').clientWidth;\n    let parallaxLayers = document.getElementsByClassName('layer');\n    for(let layer of parallaxLayers){\n      layer.style.width = `${timelineWidth}px`;\n    }\n  }\n\n  componentWillUnmount() {\n    document.getElementById('parallax').removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} alt=\"Justin and Dragons Logo\" />\n          <div className=\"timelineButtons\">\n            <button onClick={this.previousItem}>&#8249;</button>\n            <button onClick={this.nextItem}>&#8250;</button>\n          </div>\n        </header>\n        <main>\n          <div id=\"eventDescription\"></div>\n          <div id=\"parallax\" className=\"parallax\">\n            <Timeline ref=\"timeline\" />\n            <div id=\"layer_1\" className=\"layer\">\n              <div className=\"background\"></div>\n            </div>\n            <div id=\"layer_2\" className=\"layer\">\n              <div className=\"background\"></div>\n            </div>\n            <div id=\"layer_3\" className=\"layer\">\n              <div className=\"background\"></div>\n            </div>\n            <div id=\"layer_4\" className=\"layer\">\n              <div className=\"background\"></div>\n            </div>\n          </div>\n          <Party ref=\"party\" />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './components/App/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}