{"version":3,"sources":["images/justin-and-dragons-logo.png","images/sprites/Hada.png","components/Party/Party.js","components/Timeline/Timeline.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Party","activeMembers","leaveParty","member","classList","remove","setTimeout","style","display","joinParty","add","updateActiveMembers","members","availableElements","document","getElementById","childNodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","value","indexOf","id","_this","err","return","createParty","partyElements","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","partyMembers","push","react_default","a","createElement","src","hada","alt","className","this","Component","Timeline","createTimeline","events","timelineData","event","date","description","getActivePartyMembers","i","App","timelineEvents","lastScrollX","ticking","handleScroll","window","scrollX","requestAnimationFrame","checkIfActive","scrollStop","callback","isScrolling","addEventListener","clearTimeout","getTimelineEvents","getElementsByClassName","eventPosition","getBoundingClientRect","left","refs","timeline","party","removeEventListener","logo","src_components_Timeline_Timeline","ref","components_Party_Party","Boolean","location","hostname","match","ReactDOM","render","components_App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0jYAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ubCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iUCgEzBC,6MAvDbC,cAAgB,KAEhBC,WAAa,SAACC,GACZA,EAAOC,UAAUC,OAAO,YACxBC,WAAW,WACTH,EAAOI,MAAMC,QAAU,QACtB,OAGLC,UAAY,SAACN,GACXA,EAAOI,MAAMC,QAAU,QACvBF,WAAW,WACTH,EAAOC,UAAUM,IAAI,aACpB,OAGLC,oBAAsB,SAACC,GACrB,IAAIC,EAAoBC,SAASC,eAAe,aAAaC,WAD5BC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGjC,QAAAC,EAAAC,EAAmBT,EAAnBU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAA7BU,EAA6BN,EAAAO,OACC,IAAjChB,EAAQiB,QAAQF,EAAQG,IACzBC,EAAKtB,UAAUkB,GAGfI,EAAK7B,WAAWyB,IARa,MAAAK,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAK,EAAAW,QAAAX,EAAAW,SAAA,WAAAf,EAAA,MAAAC,GAcjCY,EAAK9B,cAAgBW,KAGvBsB,YAAc,WACZ,IAAIC,EAAgB,GADFC,GAAA,EAAAC,GAAA,EAAAC,OAAAlB,EAAA,IAElB,QAAAmB,EAAAC,EAAkBC,EAAlBlB,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAA+B,KAAvBjC,EAAuBoC,EAAAX,MAC7BO,EAAcO,KAAKC,EAAAC,EAAAC,cAAA,MAAIf,GAAI3B,GACzBwC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,IAAI,SACpBL,EAAAC,EAAAC,cAAA,SAAI1C,MALU,MAAA6B,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,GAQlB,OAAOH,2EAIP,OACEQ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACbN,EAAAC,EAAAC,cAAA,MAAIf,GAAG,aACJoB,KAAKhB,uBAlDIiB,4BC+BLC,6MAhCbC,eAAiB,WACf,IAAIC,EAAS,GADQrC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAErB,QAAAC,EAAAC,EAAiBiC,EAAjBhC,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA8B,KAAtBuC,EAAsBnC,EAAAO,MAC5B0B,EAAOZ,KAAKC,EAAAC,EAAAC,cAAA,MAAII,UAAU,iBACxBN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAAQO,EAAMC,MAC7Bd,EAAAC,EAAAC,cAAA,QAAMI,UAAU,UAChBN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SAASO,EAAMA,OAC9Bb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eAAeO,EAAME,gBAPnB,MAAA1B,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAK,EAAAW,QAAAX,EAAAW,SAAA,WAAAf,EAAA,MAAAC,GAUrB,OAAOmC,KAGTK,sBAAwB,SAACC,GACvB,QAAGL,EAAaK,GAAGnB,cACVc,EAAaK,GAAGnB,sFAKzB,OACEE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAAA,UACGK,KAAKG,iBACNV,EAAAC,EAAAC,cAAA,MAAII,UAAU,mBACdN,EAAAC,EAAAC,cAAA,MAAII,UAAU,4BA3BDE,aCmFRU,6MA7EbC,eAAiB,KACjBC,YAAiB,IACjBC,SAAiB,IAGjBC,aAAe,WACblC,EAAKgC,YAAcG,OAAOC,QAC1BD,OAAOE,sBAAsB,WAC3BrC,EAAKsC,gBACLvD,SAASC,eAAe,aAAaX,UAAUM,IAAI,WACnDqB,EAAKuC,WAAW,WAAQxD,SAASC,eAAe,aAAaX,UAAUC,OAAO,kBAKlFiE,WAAa,SAACC,GAEZ,IAAIC,EADCD,GAAgC,oBAAbA,GAExBL,OAAOO,iBAAiB,SAAU,SAACjB,GACjCU,OAAOQ,aAAaF,GACpBA,EAAclE,WAAW,WAAQiE,KAAc,MAC9C,MAGLI,kBAAoB,WAClB5C,EAAK+B,eAAiBhD,SAAS8D,uBAAuB,oBAKxDP,cAAgB,WACd,IAAIT,EAAI,EADY3C,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEpB,QAAAC,EAAAC,EAAoBS,EAAK+B,eAAzBvC,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAwC,KAA/BU,EAA+BN,EAAAO,MAClCiD,EAAgBlD,EAAQmD,wBAAwBC,KACpD,GAAGpD,EACD,GAAGkD,GAAiB,GAAKA,GAAiB,IAAI,CAC5ClD,EAAQvB,UAAUM,IAAI,UACtB,IAAI+B,EAAeV,EAAKiD,KAAKC,SAAStB,sBAAsBC,GAC5D7B,EAAKiD,KAAKE,MAAMvE,oBAAoB8B,QAGpCd,EAAQvB,UAAUC,OAAO,UAG7BuD,KAdkB,MAAA5B,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAK,EAAAW,QAAAX,EAAAW,SAAA,WAAAf,EAAA,MAAAC,wFAmBpB+C,OAAOO,iBAAiB,SAAUvB,KAAKe,cAGvC3D,WAAW,WAAQQ,SAASC,eAAe,aAAaX,UAAUC,OAAO,YAAc,GAEvF6C,KAAKyB,oBACLzB,KAAKmB,+DAILH,OAAOiB,oBAAoB,SAAUjC,KAAKe,+CAI1C,OACEtB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAChBN,EAAAC,EAAAC,cAAA,OAAKC,IAAKsC,IAAMpC,IAAI,6BAEtBL,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACwC,EAAD,CAAUC,IAAI,aACd3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAOD,IAAI,mBAxEHnC,aCIEqC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAShF,SAASC,eAAe,SDyH3C,kBAAmBgF,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6979c3b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/justin-and-dragons-logo.c81a4c93.png\";","module.exports = __webpack_public_path__ + \"static/media/Hada.213d5654.png\";","import React, { Component } from 'react';\r\nimport './Party.css';\r\n\r\nimport partyMembers from './PartyMembers.json';\r\n// import broxigar from '../../images/sprites/Broxigar.png';\r\nimport hada     from '../../images/sprites/Hada.png';\r\n\r\nclass Party extends Component {\r\n\r\n  activeMembers = [];\r\n\r\n  leaveParty = (member) => {\r\n    member.classList.remove(\"in-party\");\r\n    setTimeout(() => {\r\n      member.style.display = \"none\";\r\n    }, 66);\r\n  }\r\n\r\n  joinParty = (member) => {\r\n    member.style.display = \"block\";\r\n    setTimeout(() => {\r\n      member.classList.add(\"in-party\");\r\n    }, 66);\r\n  }\r\n\r\n  updateActiveMembers = (members) => {\r\n    let availableElements = document.getElementById(\"partyList\").childNodes;\r\n\r\n    for(let element of availableElements){\r\n      if(members.indexOf(element.id) !== -1){\r\n        this.joinParty(element);\r\n      }\r\n      else {\r\n        this.leaveParty(element);\r\n      }\r\n    }\r\n\r\n    // Store a reference of active members to compare\r\n    // the next time this function is called\r\n    this.activeMembers = members;\r\n  }\r\n\r\n  createParty = () => {\r\n    let partyElements = [];\r\n    for(let member of partyMembers){\r\n      partyElements.push(<li id={member}>\r\n        <img src={hada} alt=\"Hada\" />\r\n        <p>{member}</p>\r\n      </li>);\r\n    }\r\n    return partyElements;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Party\">\r\n        <ul id=\"partyList\">\r\n          {this.createParty()}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Party;\r\n","import React, { Component } from 'react';\r\nimport './Timeline.css';\r\nimport timelineData from './Timeline.json'\r\n\r\nclass Timeline extends Component {\r\n\r\n  createTimeline = () => {\r\n    let events = [];\r\n    for(let event of timelineData){\r\n      events.push(<li className=\"timelineEvent\">\r\n        <div className=\"date\">{event.date}</div>\r\n        <span className=\"point\"></span>\r\n        <div className=\"event\">{event.event}</div>\r\n        <div className=\"description\">{event.description}</div>\r\n      </li>);\r\n    }\r\n    return events;\r\n  }\r\n\r\n  getActivePartyMembers = (i) => {\r\n    if(timelineData[i].partyMembers)\r\n      return timelineData[i].partyMembers;\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Timeline\">\r\n        <ol>\r\n          {this.createTimeline()}\r\n          <li className=\"timelineSpacer\"></li>\r\n          <li className=\"timelineSpacer\"></li>\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timeline;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport logo from '../../images/justin-and-dragons-logo.png';\r\n\r\nimport Party    from '../Party/Party';\r\nimport Timeline from '../Timeline/Timeline';\r\n\r\nclass App extends Component {\r\n\r\n  timelineEvents = [];\r\n  lastScrollX    = 0;\r\n  ticking        = false;\r\n  activeElement;\r\n\r\n  handleScroll = () => {\r\n    this.lastScrollX = window.scrollX;\r\n    window.requestAnimationFrame(() => {\r\n      this.checkIfActive();\r\n      document.getElementById(\"partyList\").classList.add(\"walking\");\r\n      this.scrollStop(() => { document.getElementById(\"partyList\").classList.remove(\"walking\") });\r\n    });\r\n  };\r\n\r\n  // Calls back once scrolling has stopped.\r\n  scrollStop = (callback) => {\r\n    if (!callback || typeof callback !== 'function') return;\r\n    var isScrolling;\r\n    window.addEventListener('scroll', (event) => {\r\n      window.clearTimeout(isScrolling);\r\n      isScrolling = setTimeout(() => { callback() }, 66);\r\n    }, false);\r\n  };\r\n\r\n  getTimelineEvents = () => {\r\n    this.timelineEvents = document.getElementsByClassName(\"timelineEvent\");\r\n  }\r\n\r\n  // Check the scroll position of all timeline elements\r\n  // Mark element as active if it is within 500px of the edge of the screen\r\n  checkIfActive = () => {\r\n    let i = 0;\r\n    for (let element of this.timelineEvents){\r\n      let eventPosition = element.getBoundingClientRect().left;\r\n      if(element){\r\n        if(eventPosition >= 0 && eventPosition <= 500){ // Max range is equal to the width of every event element\r\n          element.classList.add(\"active\");\r\n          let partyMembers = this.refs.timeline.getActivePartyMembers(i);\r\n          this.refs.party.updateActiveMembers(partyMembers);\r\n        }\r\n        else{\r\n          element.classList.remove(\"active\");\r\n        }\r\n      }\r\n      i++;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    // This line prevents the characters from walking indefinitely on page refresh\r\n    setTimeout(() => { document.getElementById(\"partyList\").classList.remove(\"walking\") }, 0);\r\n\r\n    this.getTimelineEvents();\r\n    this.checkIfActive();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} alt=\"Justin and Dragons Logo\" />\r\n        </header>\r\n        <main>\r\n          <Timeline ref=\"timeline\" />\r\n          <Party ref=\"party\" />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './components/App/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}