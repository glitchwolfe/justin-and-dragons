{"version":3,"sources":["images/justin-and-dragons-logo.png","images/sprites/Broxigar.png","images/sprites/Hada.png","Party.js","Timeline.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Party","partyMembers","activeMembers","updateActiveMembers","members","availableElements","document","getElementById","childNodes","console","log","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","value","style","display","indexOf","id","err","return","createParty","partyElements","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this","member","push","react_default","a","createElement","className","this","Component","Timeline","createTimeline","events","timelineData","event","date","description","getActivePartyMembers","i","App","timelineEvents","lastScrollX","ticking","handleScroll","window","scrollX","requestAnimationFrame","checkIfActive","getTimelineEvents","getElementsByClassName","eventPosition","getBoundingClientRect","left","classList","add","refs","timeline","party","remove","addEventListener","removeEventListener","src","logo","alt","src_Timeline_1","ref","src_Party_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0jYAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gMC4GzBC,gOApGbC,aAAe,CAEb,WACA,SACA,SACA,aACA,OACA,UACA,SACA,UACA,SACA,QACA,OAGA,WACA,QACA,SACA,SACA,UACA,YACA,SACA,QAGA,QACA,QACA,OACA,aACA,SACA,aACA,SACA,OACA,QACA,WAGA,MACA,OACA,UACA,SACA,WACA,QACA,SACA,SACA,QAGFC,cAAgB,KAUhBC,oBAAsB,SAACC,GACrB,IAAIC,EAAoBC,SAASC,eAAe,aAAaC,WAC7DC,QAAQC,IAAI,iBAAkBN,GAFG,IAAAO,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGjC,QAAAC,EAAAC,EAAmBX,EAAnBY,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAA7BU,EAA6BN,EAAAO,MACnCD,EAAQE,MAAMC,QAAU,QACY,IAAjCpB,EAAQqB,QAAQJ,EAAQK,MACzBL,EAAQE,MAAMC,QAAU,WANK,MAAAG,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,OAWnCgB,YAAc,WACZ,IAAIC,EAAgB,GADFC,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IAElB,QAAAoB,EAAAC,EAAkBC,EAAKnC,aAAvBgB,OAAAC,cAAAa,GAAAG,EAAAC,EAAAhB,QAAAC,MAAAW,GAAA,EAAoC,KAA5BM,EAA4BH,EAAAZ,MAClCQ,EAAcQ,KAAKC,EAAAC,EAAAC,cAAA,MAAIf,GAAIW,GAASA,KAHpB,MAAAV,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,GAKlB,OAAOH,0OAgBP,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIf,GAAG,aACJiB,KAAKd,uBA/FIe,6BC8BLC,6MA9BbC,eAAiB,WACf,IAAIC,EAAS,GADQpC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAErB,QAAAC,EAAAC,EAAiBgC,EAAjB/B,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA8B,KAAtBsC,EAAsBlC,EAAAO,MAC5ByB,EAAOT,KAAKC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACxBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQO,EAAMC,MAC7BX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASO,EAAMA,OAC9BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeO,EAAME,gBAPnB,MAAAxB,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,GAUrB,OAAOkC,KAGTK,sBAAwB,SAACC,GACvB,QAAGL,EAAaK,GAAGpD,cACV+C,EAAaK,GAAGpD,sFAKzB,OACEsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UACGE,KAAKG,0BAzBOF,aCuERU,6MAjEbC,eAAiB,KACjBC,YAAiB,IACjBC,SAAiB,IAGjBC,aAAe,WACbtB,EAAKoB,YAAcG,OAAOC,QACrBxB,EAAKqB,UACRE,OAAOE,sBAAsB,WAC3BzB,EAAKqB,SAAU,IAEjBrB,EAAKqB,SAAU,EACfrB,EAAK0B,oBAITC,kBAAoB,WAClB3B,EAAKmB,eAAiBjD,SAAS0D,uBAAuB,oBAKxDF,cAAgB,WACd,IAAIT,EAAI,EADY1C,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEpB,QAAAC,EAAAC,EAAoBoB,EAAKmB,eAAzBtC,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAwC,KAA/BU,EAA+BN,EAAAO,MAClC2C,EAAgB5C,EAAQ6C,wBAAwBC,KACpD,GAAG9C,EACD,GAAG4C,GAAiB,GAAKA,GAAiB,IAAI,CAC5C5C,EAAQ+C,UAAUC,IAAI,UAEtB,IAAIpE,EAAemC,EAAKkC,KAAKC,SAASnB,sBAAsBC,GAC5DjB,EAAKkC,KAAKE,MAAMrE,oBAAoBF,QAGpCoB,EAAQ+C,UAAUK,OAAO,UAG7BpB,KAfkB,MAAA1B,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,wFAoBpB8C,OAAOe,iBAAiB,SAAU/B,KAAKe,cACvCf,KAAKoB,mEAILJ,OAAOgB,oBAAoB,SAAUhC,KAAKe,+CAI1C,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKmC,IAAKC,IAAMC,IAAI,6BAEtBvC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACsC,EAAD,CAAUC,IAAI,aACdzC,EAAAC,EAAAC,cAACwC,EAAD,CAAOD,IAAI,mBA5DHpC,aCIEsC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAAclF,SAASC,eAAe,SDwHhD,kBAAmBkF,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8af176dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/justin-and-dragons-logo.c81a4c93.png\";","module.exports = __webpack_public_path__ + \"static/media/Broxigar.9abaaa0d.png\";","module.exports = __webpack_public_path__ + \"static/media/Hada.213d5654.png\";","import React, { Component } from 'react';\r\nimport './Party.css';\r\n\r\nimport broxigar from './images/sprites/Broxigar.png';\r\nimport hada     from './images/sprites/Hada.png';\r\n\r\nclass Party extends Component {\r\n\r\n  partyMembers = [\r\n    // 1st Campaign\r\n    \"Broxigar\",\r\n    \"Rhogog\",\r\n    \"Rayven\",\r\n    \"Lothkorius\",\r\n    \"Hada\",\r\n    \"Carmine\",\r\n    \"Sawyer\",\r\n    \"Thorkel\",\r\n    \"Rhazer\",\r\n    \"Quiet\",\r\n    \"Bolt\",\r\n\r\n    // Campaign 2:\r\n    \"Argentum\",\r\n    \"Komrk\",\r\n    \"Magnus\",\r\n    \"Thagus\",\r\n    \"Rozalin\",\r\n    \"Toadstool\",\r\n    \"Boskov\",\r\n    \"Tenor\",\r\n\r\n    // Campaign 3\r\n    \"Elect\",\r\n    \"Vhate\",\r\n    \"Ogda\",\r\n    \"Tannenbaum\",\r\n    \"Rhazer\",\r\n    \"Kelibourne\",\r\n    \"Karasu\",\r\n    \"Cole\",\r\n    \"Sirus\",\r\n    \"Celestia\",\r\n\r\n    // Campaign 4\r\n    \"Aoi\",\r\n    \"Cero\",\r\n    \"Cornell\",\r\n    \"Denasi\",\r\n    \"Hamilcar\",\r\n    \"Kasel\",\r\n    \"Kormag\",\r\n    \"Bthuhl\",\r\n    \"Zo\"\r\n  ];\r\n\r\n  activeMembers = [];\r\n\r\n  leaveParty(){}\r\n\r\n  joinParty(){}\r\n\r\n  killCharacter(){}\r\n\r\n  reviveCharacter(){}\r\n\r\n  updateActiveMembers = (members) => {\r\n    let availableElements = document.getElementById(\"partyList\").childNodes;\r\n    console.log(\"active members\", members);\r\n    for(let element of availableElements){\r\n      element.style.display = \"none\";\r\n      if(members.indexOf(element.id) !== -1){\r\n        element.style.display = \"inline\";\r\n      }\r\n    }\r\n  }\r\n\r\n  createParty = () => {\r\n    let partyElements = [];\r\n    for(let member of this.partyMembers){\r\n      partyElements.push(<li id={member}>{member}</li>);\r\n    }\r\n    return partyElements;\r\n  }\r\n\r\n  // <li id=\"Hada\"><img src={hada} alt=\"Hada\" /></li>\r\n  // <li id=\"Broxigar\"><img src={broxigar} alt=\"Broxigar\" /></li>\r\n  // <li id=\"Rhogog\">Rhogog</li>\r\n  // <li id=\"Rayven\">Rayven</li>\r\n  // <li id=\"Lothkorius\">Lothkorius</li>\r\n  // <li id=\"Carmine\">Carmine</li>\r\n  // <li id=\"Sawyer\">Sawyer</li>\r\n  // <li id=\"Thorkel\">Thorkel</li>\r\n  // <li id=\"Rhazer\">Rhazer</li>\r\n  // <li id=\"Quiet\">Quiet</li>\r\n  // <li id=\"Bolt\">Bolt</li>\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Party\">\r\n        <ul id=\"partyList\">\r\n          {this.createParty()}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Party;\r\n","import React, { Component } from 'react';\r\nimport './Timeline.css';\r\nimport timelineData from './Timeline.json'\r\n\r\nclass Timeline extends Component {\r\n\r\n  createTimeline = () => {\r\n    let events = [];\r\n    for(let event of timelineData){\r\n      events.push(<li className=\"timelineEvent\">\r\n        <div className=\"date\">{event.date}</div>\r\n        <span className=\"point\"></span>\r\n        <div className=\"event\">{event.event}</div>\r\n        <div className=\"description\">{event.description}</div>\r\n      </li>);\r\n    }\r\n    return events;\r\n  }\r\n\r\n  getActivePartyMembers = (i) => {\r\n    if(timelineData[i].partyMembers)\r\n      return timelineData[i].partyMembers;\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Timeline\">\r\n        <ol>\r\n          {this.createTimeline()}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timeline;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport logo from './images/justin-and-dragons-logo.png';\n\nimport Party    from './Party';\nimport Timeline from './Timeline';\n\nclass App extends Component {\n\n  timelineEvents = [];\n  lastScrollX    = 0;\n  ticking        = false;\n  activeElement;\n\n  handleScroll = () => {\n    this.lastScrollX = window.scrollX;\n    if (!this.ticking) {\n      window.requestAnimationFrame(() => {\n        this.ticking = false;\n      });\n      this.ticking = true;\n      this.checkIfActive();\n    }\n  };\n\n  getTimelineEvents = () => {\n    this.timelineEvents = document.getElementsByClassName(\"timelineEvent\");\n  }\n\n  // Check the scroll position of all timeline elements\n  // Mark element as active if it is within 500px of the edge of the screen\n  checkIfActive = () => {\n    let i = 0;\n    for (let element of this.timelineEvents){\n      let eventPosition = element.getBoundingClientRect().left;\n      if(element){\n        if(eventPosition >= 0 && eventPosition <= 500){ // Max range is equal to the width of every event element\n          element.classList.add(\"active\");\n\n          let partyMembers = this.refs.timeline.getActivePartyMembers(i);\n          this.refs.party.updateActiveMembers(partyMembers);\n        }\n        else{\n          element.classList.remove(\"active\");\n        }\n      }\n      i++;\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n    this.getTimelineEvents();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} alt=\"Justin and Dragons Logo\" />\n        </header>\n        <main>\n          <Timeline ref=\"timeline\" />\n          <Party ref=\"party\" />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Import Components\nimport App      from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,      document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}